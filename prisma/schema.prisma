// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  prompts       Prompt[]
  comments      Comment[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
  @@index([promptId])
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
}

model Prompt {
  id          String    @id @default(cuid())
  title       String
  description String?
  content     String    @db.Text
  category    String    @default("general")
  tags        String[]
  isPublic    Boolean   @default(true)
  authorName  String?   // Para prompts an√≥nimos
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  votes       Vote[]
  
  @@index([authorId])
  @@index([isPublic])
  @@index([createdAt])
  @@index([category])
}
